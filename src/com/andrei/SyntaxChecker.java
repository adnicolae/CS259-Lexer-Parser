/* Generated By:JavaCC: Do not edit this line. SyntaxChecker.java */
import java.util.*;

public class SyntaxChecker implements SyntaxCheckerConstants {
    public static ArrayList<String> functions = new ArrayList<String>();
    public static ArrayList<String> functionCalls = new ArrayList<String>();
    public static void main(String[] args) throws ParseException {
        try {
            new SyntaxChecker(System.in).parse();
            System.out.println("PASS");
        } catch (Throwable e) {
            // Catching Throwable is ugly but JavaCC throws Error objects!
            System.out.println("FAIL" + e.getMessage());
        }
    }

  static final public int parse() throws ParseException {
    int result;
    // File ends with EOF
        result = start();
    jj_consume_token(0);
        if (!functions.contains("MAIN")) {
            {if (true) throw new ParseException("Every program must define the MAIN function");}
        }

        for (String function : functionCalls) {
            if (!functions.contains(function)) {
                {if (true) throw new ParseException("A call has been made to a non-defined function.");}
            }
        }
        {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public void start() throws ParseException, ParseException {
    String functionName = "";
    Token t = null;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEFINE:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(DEFINE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNCTION_NAME:
        t = jj_consume_token(FUNCTION_NAME);
              functionName = t.image;
        jj_consume_token(SPACE);
        normal_function();
        break;
      case DEFINE:
        jj_consume_token(DEFINE);
        normal_function();
              functionName = "DEF";
        break;
      case MAIN:
        main_function();
              functionName = "MAIN";
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
            // If the function was previously declared throw a ParseException as only one declaration is allowed
            if (functions.contains(functionName)) {
                {if (true) throw new ParseException("A function can only be defined once");}
                /* throw ParseException; System.err.println(" "); */
            }
            // Add the function name to the arraylist of functions
            else {
                functions.add(functionName);
            }
      try {
        jj_consume_token(EOL);
      } catch (ParseException e) {
            System.err.println("[LEXING ERROR] Invalid line terminator.");
            {if (true) throw e;}
            System.exit(0);
      }
    }
  }

//void normal_function(): {} { (<DEF>" "<FUNCTION_NAME>" "<PARAMETER_NAME>" "<LBRACE>" "E()" "<RBRACE>" "";"<EOL>)* <EOF> }
// Recognises function declarations
  static final public void normal_function() throws ParseException, ParseException {
    try {
      jj_consume_token(PARAMETER_NAME);
      function_body();
    } catch (ParseException e) {
        System.err.println("[PARSING ERROR] Incorrect parameter name.");
        {if (true) throw e;}
        System.exit(0);
    }
  }

  static final public void main_function() throws ParseException {
    jj_consume_token(MAIN);
    function_body();
  }

  static final public void function_body() throws ParseException, ParseException {
    try {
      jj_consume_token(SPACE);
      jj_consume_token(LBRACE);
      jj_consume_token(SPACE);
      E();
      jj_consume_token(SPACE);
      jj_consume_token(RBRACE);
      jj_consume_token(SPACE);
      jj_consume_token(SEMICOLON);
    } catch (ParseException e) {
        System.err.println("[PARSING ERROR] Incorrect function body formatting.");
        {if (true) throw e;}
        System.exit(0);
    }
  }

  static final public void E() throws ParseException {
    T();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 5:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      jj_consume_token(5);
      T();
    }
  }

  static final public void T() throws ParseException {
    F();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 6:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      jj_consume_token(6);
      F();
    }
  }

// Recognises function calls
  static final public void function_call() throws ParseException, ParseException {
    String functionName = "";
    Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNCTION_NAME:
        t = jj_consume_token(FUNCTION_NAME);
              functionName = t.image;
        break;
      case DEF:
        jj_consume_token(DEF);
              functionName = "DEF";
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(3);
      E();
      jj_consume_token(4);
          functionCalls.add(functionName);
    } catch (ParseException e) {
        System.err.println("[PARSING ERROR] Incorrect function call.");
        {if (true) throw e;}
        System.exit(0);
    }
  }

  static final public void F() throws ParseException, ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUM:
        jj_consume_token(NUM);
        break;
      case PARAMETER_NAME:
        jj_consume_token(PARAMETER_NAME);
        break;
      case DEF:
      case FUNCTION_NAME:
        function_call();
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        System.err.println("[PARSING ERROR] Expected a numerical value, a parameter or a function call.");
        {if (true) throw e;}
        System.exit(0);
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public SyntaxCheckerTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20000,0x20600,0x20,0x40,0x500,0xd80,};
   }

  /** Constructor with InputStream. */
  public SyntaxChecker(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SyntaxChecker(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SyntaxCheckerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SyntaxChecker(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SyntaxCheckerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SyntaxChecker(SyntaxCheckerTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SyntaxCheckerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[18];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 18; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}

abstract class Exp {}
class Num extends Exp {
    int value;
    Num (int v) { this.value = v; }
    public String toString() { return value + ""; }
}

class Param extends Exp {
    String param;
    Param (String p) { this.param = p; }
    public String toString() { return param; };
}

class BinaryExp extends Exp {
    String op;
    Exp left, right;
    BinaryExp(String op, Exp left, Exp right) {
        this.op = op;
        this.left = left;
        this.right = right;
    }
    public String toString() {
        return op + " " + left + " " + right;
    }
}
