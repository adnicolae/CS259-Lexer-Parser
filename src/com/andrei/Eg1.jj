PARSER_BEGIN(SyntaxChecker)
import java.util.*;

public class SyntaxChecker {
    public static ArrayList<String> functions = new ArrayList<String>();
    public static ArrayList<String> functionCalls = new ArrayList<String>();
    public static void main(String[] args) throws ParseException {
        try {
            new SyntaxChecker(System.in).parse();
            System.out.println("PASS");
        } catch (Throwable e) {
            // Catching Throwable is ugly but JavaCC throws Error objects!
            System.out.println("FAIL" + e.getMessage());
        }
    }
}

PARSER_END(SyntaxChecker)

SKIP:  { "\t" | "\r" }
TOKEN:
{
  "("
| ")"
| "+"
| "*"
| <NUM: (["0"-"9"])+>
| <DEF: "DEF">
| <MAIN: "MAIN">
| <FUNCTION_NAME: (["A"-"Z"])+>
| <PARAMETER_NAME: (["a"-"z"])+>
| <LBRACE: "{">
| <RBRACE: "}">
| <SPACE: " ">
| <SEMICOLON: ";">
| <EOL: "\n">
| <DEFINE: <DEF> <SPACE>>
}

void parse():
{
}
{
    // File ends with EOF
    start() <EOF>
    {
        if (!functions.contains("MAIN")) {
            throw new ParseException("Every program must define the MAIN function");
        }

        for (String function : functionCalls) {
            if (!functions.contains(function)) {
                throw new ParseException("A call has been made to a non-defined function.");
            }
        }
    }
}

void start() throws ParseException:
{
    String functionName = "";
    Token t = null;
}
{
   (
        // Declaring either a MAIN function or a normal (non-MAIN) function
        //<DEFINE> (normal_function() | main_function() | <DEFINE> normal_function())
        <DEFINE>
        (
            t = <FUNCTION_NAME>
            { functionName = t.image; }
            <SPACE> normal_function()
        |   <DEFINE> normal_function()
            { functionName = "DEF"; }
        |   main_function()
            { functionName = "MAIN"; }
        )

        // The string functionName now contains the name of the function that was declared
        {
            // If the function was previously declared throw a ParseException as only one declaration is allowed
            if (functions.contains(functionName)) {
                throw new ParseException("A function can only be defined once");
                /* throw ParseException; System.err.println(" "); */
            }
            // Add the function name to the arraylist of functions
            else {
                functions.add(functionName);
            }
        }
        // Each line must end with EOL
        try {
            <EOL>
        }

        // If a line didn't end with EOL, alert the user and quit
        catch (ParseException e) {
            System.err.println("[LEXING ERROR] Invalid line terminator.");
            throw e;
            System.exit(0);
        }
    )* // Any number of normal functions is permitted


}

//void normal_function(): {} { (<DEF>" "<FUNCTION_NAME>" "<PARAMETER_NAME>" "<LBRACE>" "E()" "<RBRACE>" "";"<EOL>)* <EOF> }
// Recognises function declarations
void normal_function() throws ParseException:
{
}
{
    try {
        (
        //<FUNCTION_NAME>
        //" "
        <PARAMETER_NAME>
        function_body()
        )
    }

    catch (ParseException e) {
        System.err.println("[PARSING ERROR] Incorrect parameter name.");
        throw e;
        System.exit(0);
    }
}

void main_function():
{
}
{
    (
    <MAIN>
    function_body()
    )
}
void function_body() throws ParseException:
{
}
{
    try {
        (
        <SPACE>
        <LBRACE>
        <SPACE>
        E()
        <SPACE>
        <RBRACE>
        <SPACE>
        <SEMICOLON>
        )
    }

    catch (ParseException e) {
        System.err.println("[PARSING ERROR] Incorrect function body formatting.");
        throw e;
        System.exit(0);
    }
}

void E(): {} { T() ("+" T())*      }
void T(): {} { F() ("*" F())*      }
// Recognises function calls
void function_call() throws ParseException:
{
    String functionName = "";
    Token t;
}
{
    // Function calls within the function body should be of the type function_name(function_parameters)
    try {
        // either a normal function name or a DEF one
        (
        t = <FUNCTION_NAME>
            { functionName = t.image; }
        |
        <DEF>
            { functionName = "DEF"; }
        ) "(" E() ")"
        { functionCalls.add(functionName); }
    }

    catch (ParseException e) {
        System.err.println("[PARSING ERROR] Incorrect function call.");
        throw e;
        System.exit(0);
    }
}
void F() throws ParseException:
{
}
{
    try {
        (<NUM> | <PARAMETER_NAME> | function_call())
    }

    catch (ParseException e) {
        System.err.println("[PARSING ERROR] Expected a numerical value, a parameter or a function call.");
        throw e;
        System.exit(0);
    }
}